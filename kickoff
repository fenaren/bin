#!/bin/bash

# Prints appropriate usage
display_usage() {
    echo "Usage: $0 [-c | --clear] [-e | --email] [-h | --help] CMD"
}

BASENAME=$(basename "$0")

# Reports go here (intentionally unquoted)
REPORT_DIR=~/.${BASENAME}

CLEAR_SET=false

CMD=
CMD_SET=false

VERBOSITY=0

while [ -n "$1" ]
do
    case "$1" in

        -c | --clear)
            CLEAR_SET=true
            ;;

        -h | --help)
            display_usage
            exit 0
            ;;

        -v | --verbose)
            VERBOSITY=$((VERBOSITY + 1))
            ;;

        *)
            CMD="$*"
            CMD_SET=true
            break
            ;;
    esac

    # We're done with the current argument, move to the next.
    shift
done

# Deal with the -c argument for clearing the report directory
if [ "${CLEAR_SET}" == true ]; then

    if [ "${VERBOSITY}" -gt 0 ]; then
        echo "Removing contents of ${REPORT_DIR}"
    fi

    rm -rf "${REPORT_DIR:?}"/*

    # This lets a user just clear the directory if that's all they want to do
    if [ "${CMD_SET}" == false ]; then
        exit 0
    fi
fi

if [ "${CMD_SET}" == false ]; then
    display_usage
    exit 1
fi

# Make the report directory if it doesn't already exist
if ! test -d "${REPORT_DIR}"; then

    if [ "${VERBOSITY}" -gt 0 ]; then
        echo "Creating report directory ${REPORT_DIR}"
    fi

    mkdir "${REPORT_DIR}"
fi

# Come up with a short name to describe this job.  The "$$" at the end is
# supposed to be there.

# This grabs the first space-delimited token.  This may have unsafe characters
# in it so we clean it by stripping of all the non-alphanumeric characters and
# then grabbing only the first space-delimited token
CMD_IDENT=$(basename "${CMD}" | cut -d " " -f 1 | tr -C '[:alpha:]' " ")

# Now pick off the first space-delimited token.  This isn't the best way to do
# this since we won't want to loop here, but it's what seems to be working now.
for WORD in ${CMD_IDENT}; do
    CMD_IDENT="${WORD}"
    break
done

# Files containing output from the command will use this directory prefix (the
# $$ appends the PID). Command output is sorted first by command identifier,
# then by Epoch time, then by PID
OUTPUT_DIR="${REPORT_DIR}/${CMD_IDENT}/"
OUTPUT_DIR+=$(date -j -f "%a %b %d %T %Z %Y" "`date`" "+%s")/$$

if [ "${VERBOSITY}" -gt 0 ]; then
    echo "Reports will be written to ${OUTPUT_DIR}"
fi

mkdir -p "${OUTPUT_DIR}"

# This redirects output from the command to where we want it
WRAPPED_CMD="${CMD} > ${OUTPUT_DIR}/out 2> ${OUTPUT_DIR}/err"

# This adds timing and redirects the time output where we want it.  A subshell
# has to be used here instead of bracket grouping for some reason.
WRAPPED_CMD="time (${WRAPPED_CMD}) 2> ${OUTPUT_DIR}/time"

# This makes the whole thing uninterruptible.  Do this last.  Frustratingly,
# nohup can't be given a subshell, so invoke bash with it instead.
WRAPPED_CMD="nohup bash -c '${WRAPPED_CMD}' > /dev/null 2> /dev/null "
WRAPPED_CMD+="< /dev/null &"

eval "${WRAPPED_CMD}"
